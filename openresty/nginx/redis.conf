# communicating with redis
# use by the caching subsystem
location /redis {
    internal;
    content_by_lua_block {
        local cjson = require 'cjson'
        local tablex = require 'pl.tablex'
        local redis_host = os.getenv('REDIS_HOST') or "" 
        local redis_port = os.getenv('REDIS_PORT') or "0" 
        local redis_user = os.getenv('REDIS_USER') or "0" 
        local redis_pass = os.getenv('REDIS_PASS') or "0" 
        local connection_timeout = 1000 --1s
        local connection_pool_size = 100
        local max_connection_idle_time = 10000 --10s

        local redis = require "resty.redis"
        local red = redis:new()
        red:set_timeout(connection_timeout)
        local ok, err = red:connect(redis_host, redis_port)
        if not ok then
            ngx.log(ngx.ERR, "failed to connect: ", err)
            return
        end
        
        -- use this for authenticating to redis 6+ with ACL
        -- local res, err = red:auth(redis_user, redis_pass)
        local res, err = red:auth(redis_pass)
        if not res then
            ngx.log(ngx.ERR, "failed to authenticate: ", err)
            return
        end

        if ngx.var.arg_method == 'get' then
            local res, err = red:get(ngx.var.arg_key)
            if res == ngx.null then
                ngx.status = 404
                return ngx.exit(ngx.HTTP_NOT_FOUND)
            end
            ngx.say(res)
        elseif ngx.var.arg_method == 'put' then
            ngx.req.read_body()  -- explicitly read the req body
            local data = ngx.req.get_body_data()
            red:set(ngx.var.arg_key, data, 'EX', ngx.var.arg_exptime)
            ngx.status = 200
            return ngx.exit(ngx.HTTP_OK)
        elseif ngx.var.arg_method == 'batch' then
            ngx.req.read_body()  -- explicitly read the req body
            local body = ngx.req.get_body_data()
            local requests = cjson.decode(body)
            red:init_pipeline()
            for k,r in ipairs(requests) do
                red[r[1]](red, unpack(tablex.sub(r, 2)))
            end
            local results, err = red:commit_pipeline()
            if not results then
                ngx.log(ngx.ERR,"failed to commit the pipelined requests: ", err)
                return
            end
            ngx.header.content_type = 'application/json'
            return ngx.say(cjson.encode(results))
        end

        local ok, err = red:set_keepalive(max_connection_idle_time, connection_pool_size)
        if not ok then
            ngx.log(ngx.ERR, "failed to set keepalive: ", err)
            return
        end
    }
}