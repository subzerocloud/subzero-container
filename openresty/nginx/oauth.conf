# to add a new provider also edit the unknown_oauth_provider map in nginx.conf

# initialize oauth configuration
set_by_lua_block $oauth_redirect_uri { return ngx.var.scheme..'://'..ngx.var.http_host..'/oauth/callback' }
set_by_lua_block $oauth_success_uri { return os.getenv('OAUTH_SUCCESS_URI') }

# # google oauth configuration
set $google_redirect_uri "${oauth_redirect_uri}?provider=google";
set $google_success_uri "${oauth_success_uri}";
set_by_lua_block $google_client_id {return os.getenv('OAUTH_GOOGLE_CLIENT_ID')}
set_by_lua_block $google_client_secret {return os.getenv('OAUTH_GOOGLE_CLIENT_SECRET')}
set_by_lua_block $google_authorization_url {return os.getenv('OAUTH_GOOGLE_AUTHORIZATION_URL')}
set_by_lua_block $google_token_url {return os.getenv('OAUTH_GOOGLE_TOKEN_URL')}
set_by_lua_block $google_userinfo_url {return os.getenv('OAUTH_GOOGLE_USERINFO_URL')}
set_by_lua_block $google_scope {return os.getenv('OAUTH_GOOGLE_SCOPE')}

# github oauth configuration
set $github_redirect_uri "${oauth_redirect_uri}?provider=github";
set $github_success_uri "${oauth_success_uri}";
set_by_lua_block $github_client_id {return os.getenv('OAUTH_GITHUB_CLIENT_ID')}
set_by_lua_block $github_client_secret {return os.getenv('OAUTH_GITHUB_CLIENT_SECRET')}
set_by_lua_block $github_authorization_url {return os.getenv('OAUTH_GITHUB_AUTHORIZATION_URL')}
set_by_lua_block $github_token_url {return os.getenv('OAUTH_GITHUB_TOKEN_URL')}
set_by_lua_block $github_userinfo_url {return os.getenv('OAUTH_GITHUB_USERINFO_URL')}
set_by_lua_block $github_scope {return os.getenv('OAUTH_GITHUB_SCOPE')}

# facebook oauth configuration
set $facebook_redirect_uri "${oauth_redirect_uri}?provider=facebook";
set $facebook_success_uri "${oauth_success_uri}";
set_by_lua_block $facebook_client_id {return os.getenv('OAUTH_FACEBOOK_CLIENT_ID')}
set_by_lua_block $facebook_client_secret {return os.getenv('OAUTH_FACEBOOK_CLIENT_SECRET')}
set_by_lua_block $facebook_authorization_url {return os.getenv('OAUTH_FACEBOOK_AUTHORIZATION_URL')}
set_by_lua_block $facebook_token_url {return os.getenv('OAUTH_FACEBOOK_TOKEN_URL')}
set_by_lua_block $facebook_userinfo_url {return os.getenv('OAUTH_FACEBOOK_USERINFO_URL')}
set_by_lua_block $facebook_scope {return os.getenv('OAUTH_FACEBOOK_SCOPE')}

location /oauth/login {
    set $oauth_config_prefix "${arg_provider}_";
    if ($unknown_oauth_provider) {
        return 404;
    }
    content_by_lua_file '../luajit/share/lua/5.1/ngx-oauth-login.lua';
}

location /oauth/callback {
    set $oauth_config_prefix "${arg_provider}_";
    if ($unknown_oauth_provider) {
        return 404;
    }
    rewrite_by_lua_block {
        local config  = require 'ngx-oauth.config'
        local either  = require 'ngx-oauth.either'
        local httpc   = require 'ngx-oauth.http_client'
        local nginx   = require 'ngx-oauth.nginx'
        local oauth   = require 'ngx-oauth.oauth2'
        local util    = require 'ngx-oauth.util'
        local cjson   = require 'cjson'
        local jwt     = require "resty.jwt"
        local log     = nginx.log
        local par     = util.partial

        local fail_with_oaas_error = par(nginx.fail, 503, "Authorization server error: %s")
        local get_or_fail = par(either, fail_with_oaas_error, util.id)

        local conf, err = config.load()
        if err then
            return nginx.fail(500, "OAuth proxy error: %s", err)
        end

        local err_code = nginx.get_uri_arg('error')
        local auth_code = nginx.get_uri_arg('code')

        log.debug('processing request from authorization server')

        if err_code then
            return nginx.fail(403, err_code)

        elseif auth_code then
            log.debug("requesting token for auth code: %s", auth_code)

            local token = get_or_fail(oauth.request_token('authorization_code', conf, auth_code))

            local profile = get_or_fail(httpc.get_for_json(conf.userinfo_url, token.access_token))
            -- dump(profile)
            local jwt_token = jwt:sign(
                os.getenv('JWT_SECRET'),
                {
                    header={typ='JWT', alg='HS256'},
                    payload={role='proxy', oauth_login='true'}
                }
            )
            local body = {
                provider = ngx.var.arg_provider,
                profile = profile
            }
            
            -- make an internal redirect
            ngx.req.set_header('Content-Type', 'application/json')
            ngx.req.set_header('Authorization', 'Bearer '..jwt_token)
            ngx.req.read_body()
            ngx.req.set_body_data(cjson.encode(body))
            ngx.req.set_method(ngx.HTTP_POST)
            ngx.req.set_uri_args({})
            ngx.req.set_uri(conf.success_uri, true)
        else
            return nginx.fail(400, "Missing query parameter 'code' or 'error'.")
        end

    }
}
 